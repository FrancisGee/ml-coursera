function [J grad] = nnCostFunction(nn_params, ...
                                    input_layer_size, ...
                                    hidden_layer_size, ...
                                    num_labels, ...
                                    X, y, lambda)
%NNCOSTFUNCTION Implements the neural network cost function for a two layer
%neural network which performs classification
%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...
%   X, y, lambda) computes the cost and gradient of the neural network. The
%   parameters for the neural network are "unrolled" into the vector
%   nn_params and need to be converted back into the weight matrices. 
% 
%   The returned parameter grad should be a "unrolled" vector of the
%   partial derivatives of the neural network.
%

% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices
% for our 2 layer neural network


Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...
                 hidden_layer_size, (input_layer_size + 1));

Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...
                 num_labels, (hidden_layer_size + 1));

% Setup some useful variables
m = size(X, 1);
         
% You need to return the following variables correctly 
J = 0;
Theta1_grad = zeros(size(Theta1));
Theta2_grad = zeros(size(Theta2));

% ====================== YOUR CODE HERE ======================
% Instructions: You should complete the code by working through the
%               following parts.
%
% Part 1: Feedforward the neural network and return the cost in the
%         variable J. After implementing Part 1, you can verify that your
%         cost function computation is correct by verifying the cost
%         computed in ex4.m
%

% Part 2: Implement the backpropagation algorithm to compute the gradients
%         Theta1_grad and Theta2_grad. You should return the partial derivatives of
%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and
%         Theta2_grad, respectively. After implementing Part 2, you can check
%         that your implementation is correct by running checkNNGradients
%
%         Note: The vector y passed into the function is a vector of labels
%               containing values from 1..K. You need to map this vector into a 
%               binary vector of 1's and 0's to be used with the neural network
%               cost function.
%
%         Hint: We recommend implementing backpropagation using a for-loop
%               over the training examples if you are implementing it for the 
%               first time.
%
% Part 3: Implement regularization with the cost function and gradients.
%
%         Hint: You can implement this around the code for
%               backpropagation. That is, you can compute the gradients for
%               the regularization separately and then add them to Theta1_grad
%               and Theta2_grad from Part 2.
%

% 1. Feed-forward to compute h =a3

% implement forward propagation, similar to ex3

% Add ones to the X data matrix
                                                                                           %   ex4的前向传播对比ex3的前向传播有变化，ex3功能实现，但是运算顺序不太好，这里改写下                                                         
X = [ones(m, 1) X];
%implement forward propagation, similar to ex3

z1 = sigmoid(Theta1 * X');
a2 = [ones(1, size(z1, 2)); z1];
a3 = sigmoid(Theta2 * a2);
h = a3;

% Now we tranform the y result vector into a matrix where 1s in the
% columns map to the corresponding values of y

yMatrix = zeros(num_labels,m);





for i=1:num_labels,
    yMatrix(i,:) = (y==i);
end


% Now that we have y as a 10x4000 matrix instead of a 4000x1 vector,
% we can use it to calculate our cost as compared to h (which is a3)

% Note that for this vectorized implementation, y(i)k is given as
% yMatrix and h is given as h(thetha)(x(i))k

J = (sum( sum( -1*yMatrix.*log(h) - (1 - yMatrix).*log(1-h) ) ))/m;


%regularition
tempTheta1 = Theta1(:,2:end);
tempTheta2 = Theta2(:,2:end);
reg = (sum(sum(tempTheta1.^2))+sum(sum(tempTheta2.^2)))*lambda./(2*m);

J = J+reg;

% Part 2: Implement the backpropagation algorithm
for t =1:m,
    a_1 = X(t,:);
    z_2 = Theta1 * a_1';
    
    a_2 = sigmoid(z_2);
    a_2 = [1;a_2];
    
    z_3 = Theta2 * a_2;
    a_3 = sigmoid(z_3);  
    
    d_3 = a_3 - yMatrix(:,k);
    d_2 = (Theta2'*d_3).*sigmoidGradient(z_2)
    
    % Strip out bais node from resulting d2
    d_2 = d_2(2:end);
    
    Theta2_grad = (Theta2_grad + d_3 * a_2');
    Theta1_grad = (Theta1_grad + d_2 * a_1);
    
    
    
    
    
    
    
    
    




















% -------------------------------------------------------------

% =========================================================================

% Unroll gradients
grad = [Theta1_grad(:) ; Theta2_grad(:)];


%end
